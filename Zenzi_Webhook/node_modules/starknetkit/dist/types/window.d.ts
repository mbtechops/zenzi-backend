import { InvokeFunctionResponse, Signature } from 'starknet';
import { z } from 'zod';

export declare const BigNumberishSchema: z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>;
export declare const CallSchema: z.ZodObject<{
    contractAddress: z.ZodString;
    entrypoint: z.ZodString;
    calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
}, "strip", z.ZodTypeAny, {
    contractAddress: string;
    entrypoint: string;
    calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
}, {
    contractAddress: string;
    entrypoint: string;
    calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
}>;
export declare const CallsArraySchema: z.ZodArray<z.ZodObject<{
    contractAddress: z.ZodString;
    entrypoint: z.ZodString;
    calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
}, "strip", z.ZodTypeAny, {
    contractAddress: string;
    entrypoint: string;
    calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
}, {
    contractAddress: string;
    entrypoint: string;
    calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
}>, "atleastone">;
export declare const typedDataSchema: z.ZodObject<{
    types: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
        name: z.ZodString;
        type: z.ZodLiteral<"merkletree">;
        contains: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "merkletree";
        name: string;
        contains: string;
    }, {
        type: "merkletree";
        name: string;
        contains: string;
    }>, z.ZodObject<{
        name: z.ZodString;
        type: z.ZodLiteral<"enum">;
        contains: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "enum";
        name: string;
        contains: string;
    }, {
        type: "enum";
        name: string;
        contains: string;
    }>, z.ZodObject<{
        name: z.ZodString;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        name: string;
    }, {
        type: string;
        name: string;
    }>]>, "many">>;
    primaryType: z.ZodString;
    domain: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    message: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    message: Record<string, unknown>;
    types: Record<string, ({
        type: "merkletree";
        name: string;
        contains: string;
    } | {
        type: "enum";
        name: string;
        contains: string;
    } | {
        type: string;
        name: string;
    })[]>;
    primaryType: string;
    domain: Record<string, unknown>;
}, {
    message: Record<string, unknown>;
    types: Record<string, ({
        type: "merkletree";
        name: string;
        contains: string;
    } | {
        type: "enum";
        name: string;
        contains: string;
    } | {
        type: string;
        name: string;
    })[]>;
    primaryType: string;
    domain: Record<string, unknown>;
}>;
export declare const AssetSchema: z.ZodObject<{
    type: z.ZodLiteral<"ERC20">;
    options: z.ZodObject<{
        address: z.ZodString;
        symbol: z.ZodOptional<z.ZodString>;
        decimals: z.ZodOptional<z.ZodNumber>;
        image: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        address: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        image?: string | undefined;
    }, {
        address: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        image?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "ERC20";
    options: {
        address: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        image?: string | undefined;
    };
}, {
    type: "ERC20";
    options: {
        address: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        image?: string | undefined;
    };
}>;
export declare const AddStarknetChainParametersSchema: z.ZodUnion<[z.ZodObject<{
    id: z.ZodString;
    chain_id: z.ZodString;
    chain_name: z.ZodString;
    rpc_urls: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    native_currency: z.ZodOptional<z.ZodObject<{
        type: z.ZodLiteral<"ERC20">;
        options: z.ZodObject<{
            address: z.ZodString;
            symbol: z.ZodOptional<z.ZodString>;
            decimals: z.ZodOptional<z.ZodNumber>;
            image: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        }, {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    }, {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    }>>;
    block_explorer_url: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    chain_id: string;
    chain_name: string;
    rpc_urls?: string[] | undefined;
    native_currency?: {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    } | undefined;
    block_explorer_url?: string[] | undefined;
}, {
    id: string;
    chain_id: string;
    chain_name: string;
    rpc_urls?: string[] | undefined;
    native_currency?: {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    } | undefined;
    block_explorer_url?: string[] | undefined;
}>, z.ZodEffects<z.ZodObject<{
    id: z.ZodString;
    chainId: z.ZodString;
    chainName: z.ZodString;
    rpcUrls: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    nativeCurrency: z.ZodOptional<z.ZodObject<{
        type: z.ZodLiteral<"ERC20">;
        options: z.ZodObject<{
            address: z.ZodString;
            symbol: z.ZodOptional<z.ZodString>;
            decimals: z.ZodOptional<z.ZodNumber>;
            image: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        }, {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    }, {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    }>>;
    blockExplorerUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    chainId: string;
    id: string;
    chainName: string;
    rpcUrls?: string[] | undefined;
    nativeCurrency?: {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    } | undefined;
    blockExplorerUrl?: string[] | undefined;
}, {
    chainId: string;
    id: string;
    chainName: string;
    rpcUrls?: string[] | undefined;
    nativeCurrency?: {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    } | undefined;
    blockExplorerUrl?: string[] | undefined;
}>, {
    id: string;
    chain_id: string;
    chain_name: string;
    rpc_urls: string[] | undefined;
    native_currency: {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    } | undefined;
    block_explorer_url: string[] | undefined;
}, {
    chainId: string;
    id: string;
    chainName: string;
    rpcUrls?: string[] | undefined;
    nativeCurrency?: {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    } | undefined;
    blockExplorerUrl?: string[] | undefined;
}>]>;
export declare const StarknetMethodArgumentsSchemas: {
    readonly enable: z.ZodUnion<[z.ZodTuple<[z.ZodOptional<z.ZodObject<{
        starknetVersion: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"v3">, z.ZodLiteral<"v4">, z.ZodLiteral<"v5">]>>;
    }, "strip", z.ZodTypeAny, {
        starknetVersion?: "v3" | "v4" | "v5" | undefined;
    }, {
        starknetVersion?: "v3" | "v4" | "v5" | undefined;
    }>>], null>, z.ZodTuple<[], null>]>;
    readonly addStarknetChain: z.ZodTuple<[z.ZodUnion<[z.ZodObject<{
        id: z.ZodString;
        chain_id: z.ZodString;
        chain_name: z.ZodString;
        rpc_urls: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        native_currency: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ERC20">;
            options: z.ZodObject<{
                address: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                image: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            }, {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        }, {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        }>>;
        block_explorer_url: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        chain_id: string;
        chain_name: string;
        rpc_urls?: string[] | undefined;
        native_currency?: {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        } | undefined;
        block_explorer_url?: string[] | undefined;
    }, {
        id: string;
        chain_id: string;
        chain_name: string;
        rpc_urls?: string[] | undefined;
        native_currency?: {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        } | undefined;
        block_explorer_url?: string[] | undefined;
    }>, z.ZodEffects<z.ZodObject<{
        id: z.ZodString;
        chainId: z.ZodString;
        chainName: z.ZodString;
        rpcUrls: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        nativeCurrency: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ERC20">;
            options: z.ZodObject<{
                address: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                image: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            }, {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        }, {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        }>>;
        blockExplorerUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        chainId: string;
        id: string;
        chainName: string;
        rpcUrls?: string[] | undefined;
        nativeCurrency?: {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        } | undefined;
        blockExplorerUrl?: string[] | undefined;
    }, {
        chainId: string;
        id: string;
        chainName: string;
        rpcUrls?: string[] | undefined;
        nativeCurrency?: {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        } | undefined;
        blockExplorerUrl?: string[] | undefined;
    }>, {
        id: string;
        chain_id: string;
        chain_name: string;
        rpc_urls: string[] | undefined;
        native_currency: {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        } | undefined;
        block_explorer_url: string[] | undefined;
    }, {
        chainId: string;
        id: string;
        chainName: string;
        rpcUrls?: string[] | undefined;
        nativeCurrency?: {
            type: "ERC20";
            options: {
                address: string;
                symbol?: string | undefined;
                name?: string | undefined;
                decimals?: number | undefined;
                image?: string | undefined;
            };
        } | undefined;
        blockExplorerUrl?: string[] | undefined;
    }>]>], null>;
    readonly switchStarknetChain: z.ZodTuple<[z.ZodObject<{
        chainId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        chainId: string;
    }, {
        chainId: string;
    }>], null>;
    readonly watchAsset: z.ZodTuple<[z.ZodObject<{
        type: z.ZodLiteral<"ERC20">;
        options: z.ZodObject<{
            address: z.ZodString;
            symbol: z.ZodOptional<z.ZodString>;
            decimals: z.ZodOptional<z.ZodNumber>;
            image: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        }, {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    }, {
        type: "ERC20";
        options: {
            address: string;
            symbol?: string | undefined;
            name?: string | undefined;
            decimals?: number | undefined;
            image?: string | undefined;
        };
    }>], null>;
    readonly requestAccounts: z.ZodTuple<[z.ZodObject<{
        silent_mode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        silent_mode?: boolean | undefined;
    }, {
        silent_mode?: boolean | undefined;
    }>], null>;
    readonly execute: z.ZodTuple<[z.ZodUnion<[z.ZodArray<z.ZodObject<{
        contractAddress: z.ZodString;
        entrypoint: z.ZodString;
        calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }>, "atleastone">, z.ZodObject<{
        contractAddress: z.ZodString;
        entrypoint: z.ZodString;
        calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }>]>, z.ZodOptional<z.ZodObject<{
        nonce: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
        maxFee: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
        version: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
    }, "strip", z.ZodTypeAny, {
        nonce?: string | number | bigint | undefined;
        version?: string | number | bigint | undefined;
        maxFee?: string | number | bigint | undefined;
    }, {
        nonce?: string | number | bigint | undefined;
        version?: string | number | bigint | undefined;
        maxFee?: string | number | bigint | undefined;
    }>>], null>;
    readonly signMessage: z.ZodTuple<[z.ZodObject<{
        types: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            name: z.ZodString;
            type: z.ZodLiteral<"merkletree">;
            contains: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "merkletree";
            name: string;
            contains: string;
        }, {
            type: "merkletree";
            name: string;
            contains: string;
        }>, z.ZodObject<{
            name: z.ZodString;
            type: z.ZodLiteral<"enum">;
            contains: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "enum";
            name: string;
            contains: string;
        }, {
            type: "enum";
            name: string;
            contains: string;
        }>, z.ZodObject<{
            name: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            name: string;
        }, {
            type: string;
            name: string;
        }>]>, "many">>;
        primaryType: z.ZodString;
        domain: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        message: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        message: Record<string, unknown>;
        types: Record<string, ({
            type: "merkletree";
            name: string;
            contains: string;
        } | {
            type: "enum";
            name: string;
            contains: string;
        } | {
            type: string;
            name: string;
        })[]>;
        primaryType: string;
        domain: Record<string, unknown>;
    }, {
        message: Record<string, unknown>;
        types: Record<string, ({
            type: "merkletree";
            name: string;
            contains: string;
        } | {
            type: "enum";
            name: string;
            contains: string;
        } | {
            type: string;
            name: string;
        })[]>;
        primaryType: string;
        domain: Record<string, unknown>;
    }>], null>;
};
export type StarknetMethods = {
    enable: (...args: z.infer<typeof StarknetMethodArgumentsSchemas.enable>) => Promise<string[]>;
    addStarknetChain: (...args: z.infer<typeof StarknetMethodArgumentsSchemas.addStarknetChain>) => Promise<boolean>;
    switchStarknetChain: (...args: z.infer<typeof StarknetMethodArgumentsSchemas.switchStarknetChain>) => Promise<boolean>;
    watchAsset: (...args: z.infer<typeof StarknetMethodArgumentsSchemas.watchAsset>) => Promise<boolean>;
    requestAccounts: (...args: z.infer<typeof StarknetMethodArgumentsSchemas.requestAccounts>) => Promise<string[]>;
    execute: (...args: z.infer<typeof StarknetMethodArgumentsSchemas.execute>) => Promise<InvokeFunctionResponse>;
    signMessage: (...args: z.infer<typeof StarknetMethodArgumentsSchemas.signMessage>) => Promise<Signature>;
    getLoginStatus: () => Promise<{
        isLoggedIn: false;
    } | {
        isLoggedIn: true;
        hasSession: boolean;
        isPreauthorized: boolean;
    }>;
};
export declare const StarknetExecuteBackwardCompatibleArgumentsSchemas: {
    readonly execute: z.ZodUnion<[z.ZodTuple<[z.ZodUnion<[z.ZodArray<z.ZodObject<{
        contractAddress: z.ZodString;
        entrypoint: z.ZodString;
        calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }>, "atleastone">, z.ZodObject<{
        contractAddress: z.ZodString;
        entrypoint: z.ZodString;
        calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }>]>, z.ZodOptional<z.ZodObject<{
        nonce: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
        maxFee: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
        version: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
    }, "strip", z.ZodTypeAny, {
        nonce?: string | number | bigint | undefined;
        version?: string | number | bigint | undefined;
        maxFee?: string | number | bigint | undefined;
    }, {
        nonce?: string | number | bigint | undefined;
        version?: string | number | bigint | undefined;
        maxFee?: string | number | bigint | undefined;
    }>>], null>, z.ZodTuple<[z.ZodUnion<[z.ZodArray<z.ZodObject<{
        contractAddress: z.ZodString;
        entrypoint: z.ZodString;
        calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }>, "atleastone">, z.ZodObject<{
        contractAddress: z.ZodString;
        entrypoint: z.ZodString;
        calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }, {
        contractAddress: string;
        entrypoint: string;
        calldata?: (string | number | bigint | (string | number | bigint)[])[] | undefined;
    }>]>, z.ZodOptional<z.ZodArray<z.ZodAny, "many">>, z.ZodOptional<z.ZodObject<{
        nonce: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
        maxFee: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
        version: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>>;
    }, "strip", z.ZodTypeAny, {
        nonce?: string | number | bigint | undefined;
        version?: string | number | bigint | undefined;
        maxFee?: string | number | bigint | undefined;
    }, {
        nonce?: string | number | bigint | undefined;
        version?: string | number | bigint | undefined;
        maxFee?: string | number | bigint | undefined;
    }>>], null>]>;
};
export type StarknetExecuteBackwardCompatibleMethods = {
    execute: (...args: z.infer<typeof StarknetExecuteBackwardCompatibleArgumentsSchemas.execute>) => Promise<InvokeFunctionResponse>;
};
export type ConnectMethods = {
    connect: () => void;
};
export type ModalMethods = {
    shouldShow: () => void;
    shouldHide: () => void;
    heightChanged: (height: number) => void;
};
export type WebWalletMethods = ConnectMethods & ModalMethods;
export type IframeMethods = {
    connect: () => void;
};
export declare const RpcCallSchema: z.ZodEffects<z.ZodObject<{
    contract_address: z.ZodString;
    entry_point: z.ZodString;
    calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">>;
}, "strip", z.ZodTypeAny, {
    contract_address: string;
    entry_point: string;
    calldata?: (string | number | bigint)[] | undefined;
}, {
    contract_address: string;
    entry_point: string;
    calldata?: (string | number | bigint)[] | undefined;
}>, {
    contractAddress: string;
    entrypoint: string;
    calldata: (string | number | bigint)[];
}, {
    contract_address: string;
    entry_point: string;
    calldata?: (string | number | bigint)[] | undefined;
}>;
export declare const RpcCallsArraySchema: z.ZodArray<z.ZodEffects<z.ZodObject<{
    contract_address: z.ZodString;
    entry_point: z.ZodString;
    calldata: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodNumber, z.ZodBigInt]>, "many">>;
}, "strip", z.ZodTypeAny, {
    contract_address: string;
    entry_point: string;
    calldata?: (string | number | bigint)[] | undefined;
}, {
    contract_address: string;
    entry_point: string;
    calldata?: (string | number | bigint)[] | undefined;
}>, {
    contractAddress: string;
    entrypoint: string;
    calldata: (string | number | bigint)[];
}, {
    contract_address: string;
    entry_point: string;
    calldata?: (string | number | bigint)[] | undefined;
}>, "atleastone">;
export declare const deployAccountContractSchema: z.ZodObject<{
    address: z.ZodString;
    class_hash: z.ZodString;
    salt: z.ZodString;
    calldata: z.ZodArray<z.ZodString, "many">;
    sigdata: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    version: z.ZodNativeEnum<{
        readonly ZERO: 0;
        readonly ONE: 1;
    }>;
}, "strip", z.ZodTypeAny, {
    version: 0 | 1;
    class_hash: string;
    salt: string;
    calldata: string[];
    address: string;
    sigdata?: string[] | undefined;
}, {
    version: 0 | 1;
    class_hash: string;
    salt: string;
    calldata: string[];
    address: string;
    sigdata?: string[] | undefined;
}>;
