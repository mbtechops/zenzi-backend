import { RequestFnCall, RpcMessage, RpcTypeToMessageMap, StarknetWindowObject } from '@starknet-io/types-js';
import { AccountInterface, ProviderInterface, ProviderOptions } from 'starknet';
import { ConnectArgs, Connector, ConnectorData, ConnectorIcons } from '../connector';

export interface InjectedConnectorOptions {
    /** The wallet id. */
    id: string;
    /** Wallet human readable name. */
    name?: string;
    /** Wallet icons. */
    icon?: ConnectorIcons;
}
export declare class InjectedConnector extends Connector {
    private _wallet?;
    private readonly _options;
    constructor({ options }: {
        options: InjectedConnectorOptions;
    });
    get id(): string;
    get name(): string;
    get icon(): ConnectorIcons;
    available(): boolean;
    chainId(): Promise<bigint>;
    ready(): Promise<boolean>;
    account(provider: ProviderOptions | ProviderInterface): Promise<AccountInterface>;
    connect(_args?: ConnectArgs): Promise<ConnectorData>;
    disconnect(): Promise<void>;
    request<T extends RpcMessage["type"]>(call: RequestFnCall<T>): Promise<RpcTypeToMessageMap[T]["result"]>;
    private isLocked;
    private ensureWallet;
    private onAccountsChanged;
    private onNetworkChanged;
    get wallet(): StarknetWindowObject;
}
